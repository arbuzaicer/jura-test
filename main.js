// Как подписать документ

// index.js

// main.js

// test.js

// homework-1.js

    // var a = 5 // var - ключевое слово обьявления переменной (Старый вариант могут быть ошибки? её можно еще раз переопределить и она будет работать )

    // let a = 5 // let - синтаксис ES6, переменная блочной области видимости (Новый вариант, её уже нельзя переопределить)

    // const = 5 // const - константа

    // let a = 5 // Эту переменную переопределить мы не сможем, выдаст ошибку

    // для понимания кода если пишем: const name = "Vlab"; то она далее не переопределяется. А если пишем let name = "Vlad; -то нужно обратить внимание на код, возможно мы её в дальнейшем изминяли.

        // console.log(b);
        // var b = 10;
        // var b = 11;
        // var b = 20;

        // console.log(b);
        // let b = 10;



          // let test;
          // test = 1;
          // console.log(test);
          // test = 2;
          // console.log(test);
          // test = 100;

             // var b = 100;
             // console.log(b);
             // b = 130;
             // let c = 11;
             // c = 14;
             // console.log(b + c);

                // const PI = 3.14148265358;

                         // Как называть переменные
           // Только латинские буквы (a-z, A-Z);
           // Арабские цифры (0-9) можно использовать в середине переменной, но переменная не может начинаться с цифры !!!!!!!
           // Симфолы $ и _ (Символы долара и нижнего подчеркивания) с них лутше не начинать подписывать если в том случае если не работать с спец. библиотеками которие только с таких символов начинаются ($test; _test;);


                         // Как Javascript чуствителень к регистру;
           // let someVar = 1; (Две разные переменные)
           // let somevar = 2; (Всегда нужно называть переменные с нескольких слов и след слово нужно начинать с большой буквы. Пример: bleckBoxWitxRedHat,а не вот так bleckboxwitxredhat); (camelCase - Верблюжий регистр), а по нормальному "Каждое следуще слово с большой буквы";
           // let some_var или let some_Var - так пишут в дугих языках но не в javascript;

 var b = 100;
 console.log(b);
 b = 130;
 // debugger;                 // debugger; - остановить код или другими словами пауза; На начальных стадиях использовать его для паузы;
 let c = 11;
 c = 14;
console.log(b + c);

         // Литерал - это значение, указаное непосредственно в тексте программы.

         // TODO: Закончить мою програму;

         // Переменные и свойства обьектов нужно (желательно) называть согласно их значению и определению.
         // let flowers = ['Ромашка','Роза','Пион'];
         // const pinCode = "0000";
         // const price = 77.60      // не нужно называть // const var1 = 77.60; // const var8 = 77.60; // const var44 = 77.60; тогда не будет понятно что и где;
         // Функции стоит называть согласно тому, что они делают или что возвращают
         // function  getFlowers(){} // Возвращает цветок;
         // function putlnCart(){} // Кладёт в корзину;
         // function createFlower(){} // Создает цветок;


                  // создание строк;
              // const  strType1 = 'Тестовая строка';
              // const  strType2 = "Тестовая строка";
              // const  strType3 = ` "Тестовая строка" `;

                // числа
           // 5e3 === 5 * 10 ** 3;


           // let checked = false;
           // let checked = true;

     // Если переменной не присвоено значение то ее значение = undefined; (undefined - "неопределена" назначает сам Javascript) (null - сами назначаем)
     // Если свойству обьекта не присвоенно значение, мы получаем undefined;
     // Если нам нужно пустое значение, например в масиве, мы можем использовать null, null отличается от undefined тем что, null никогда не предопределен, его мы задаем самостоятельно:
           // let age = null;

   // let a = 10;
   // a += 10   // a = a + 10;
   // a *= 5    // a = a * 5;


   //typeof - возвращает строковое название типа значения;


     // Вывод данных на страницу
        // console,log("Способ 1");           // используется для откладки в процесе разработки;
        // alert("Способ 2");                  // Выводит сообщение на страцицу блокирует выполнение остального кода;
        // document.writeln("Способ 3");        // Добавляет данные прямо в HTML страницу;




